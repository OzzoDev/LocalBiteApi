version: '3.8'  # Specify the version of Docker Compose syntax to use. Version 3.8 is a stable version that supports many features.

services:  # Define the services (containers) that will be part of this application.
  
  app:  # This is the name of the first service, which will run your Node.js application.
    build:  # Indicates that this service will be built from a Dockerfile.
      context: .  # The current directory is used as the build context, meaning Docker will look for the Dockerfile and any files in this directory.

    ports:  # Map the container's ports to the host machine's ports.
      - "3123:3123"  # Map port 3123 on the host to port 3123 on the container, allowing access to the application.

    networks:  # Specify which networks the service will connect to.
      - mynetwork  # Connect this service to the 'mynetwork' network defined below.

    environment:
      PORT: ${PORT}
      NODE_ENV: ${NODE_ENV}
      MONGO_CONNECT: ${MONGO_CONNECT} 
      SESSION_KEY: ${SESSION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      DB_USER: ${DB_USER}  
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}

    volumes:  # Define volume mounts for persistent storage or code sharing.
      - .:/usr/src/app  # Mount the current directory to /usr/src/app in the container, allowing live code changes.

  db:  # This is the name of the second service, which will run the PostgreSQL database.
    image: postgres  # Use the official PostgreSQL image from Docker Hub.

    environment:  # Define environment variables for the database.
      POSTGRES_USER: Test  # PostgreSQL username.
      POSTGRES_PASSWORD: password123  # Password for the PostgreSQL user.
      POSTGRES_DB: db123  # Name of the database to create.

    ports:  # Map the container's ports to the host machine's ports.
      - "5432:5432"  # Map port 5432 on the host to port 5432 on the container, allowing access to the database.

    networks:  # Specify which networks the service will connect to.
      - mynetwork  # Connect this service to the 'mynetwork' network defined below.

    logging:  # Configure logging options for the container.
      driver: "none"  # Disable logging for the PostgreSQL container to reduce terminal clutter.

networks:  # Define custom networks for the application.
  mynetwork:  # Name of the custom network.
    driver: bridge  # Use the default bridge driver for this network, allowing containers to communicate with each other.